'use strict';

const Xml2js = require('xml2js');

const parser = new Xml2js.Parser();
const base64 = require('base-64');
const utf8 = require('utf8');
const htmlEntities = require('html-entities').AllHtmlEntities;

class StsService {
  constructor(sts, tokenValidityDuration) {
    this._sts = sts;
    this._tokenValidityDuration = tokenValidityDuration;
  }
  static _extractArnsFromSamlResponse(samlResponse) {
    const samlResponseHtmlDecoded = htmlEntities.decode(samlResponse);
    const samlResponseBytes = base64.decode(samlResponseHtmlDecoded);
    const decodedSamlResponse = utf8.decode(samlResponseBytes);

    let arnsString = '';
    parser.parseString(decodedSamlResponse, (err, result) => {
      const attributes = result['saml2p:Response']['saml2:Assertion'][0]['saml2:AttributeStatement'][0]['saml2:Attribute'];
      for (let i = 0; i < attributes.length; i += 1) {
        if (attributes[i].$.Name === 'https://aws.amazon.com/SAML/Attributes/Role') {
          arnsString = attributes[i]['saml2:AttributeValue'][0]._;
        }
      }
    });

    const roles = arnsString.split(',');
    let roleArn = '';
    let principalArn = '';

    for (let i = 0; i < roles.length; i += 1) {
      if (roles[i].includes('saml-provider')) {
        principalArn = roles[i];
      } else if (roles[i].includes('role')) {
        roleArn = roles[i];
      }
    }

    return { principalArn, roleArn };
  }

  getSTSToken(rawSamlResponse) {
    const roles = StsService._extractArnsFromSamlResponse(rawSamlResponse);
    const params = {
      PrincipalArn: roles.principalArn,
      RoleArn: roles.roleArn,
      SAMLAssertion: htmlEntities.decode(rawSamlResponse),
      DurationSeconds: this._tokenValidityDuration
    };
    return this._sts.assumeRoleWithSAML(params).promise()
      .then(data => data.Credentials);
  }
}

module.exports = StsService;
