'use strict';

const requestAsync = require('request-promise-native');

class OktaService {
  constructor() {
    this._userAgent = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 7.0; InfoPath.3; .NET CLR 3.1.40767; Trident/6.0; en-IN)';
    this.jar = requestAsync.jar();
  }

  generateSamlResponse(username, password, mfa, accountUrl) {
    return this._primaryAuth(username, password)
      .then(sessionToken => this._populateCookies(sessionToken)
        .then(() => this._getStateToken(accountUrl)
          .then(stateToken => this._getFactorId(stateToken)
            .then(factorId => this._performMFAVerification(factorId, mfa, stateToken)
              .then(() => this._getSAMLResponse(sessionToken, accountUrl))))));
  }
  _primaryAuth(username, password) {
    const url = 'https://gamestop.okta.com/api/v1/authn';
    const request = this._createRequest(url, 'POST');
    request.body = {
      username,
      password,
      options: {
        warnBeforePasswordExpired: true,
        multiOptionalFactorEnroll: true
      }
    };
    request.json = true;
    return requestAsync(request)
      .then(response => response.sessionToken);
  }

  _populateCookies(sessionToken) {
    const url = `https://gamestop.okta.com/login/sessionCookieRedirect?checkAccountSetupComplete=true&token=${sessionToken}&redirectUrl=https%3A%2F%2Fgamestop.okta.com%2Fuser%2Fnotifications`;
    const request = this._createRequest(url, 'GET');
    return requestAsync(request);
  }

  async _getStateToken(accountUrl) {
    let stateToken = '';
    let retryCount = 0;
    const request = this._createRequest(accountUrl, 'GET');
    while ((stateToken.includes('\\') || stateToken === '') && retryCount < 10) {
      retryCount += 1;
      /* eslint-disable */ /*recommended for this approach @ https://eslint.org/docs/rules/no-await-in-loop */
      await requestAsync(request)
        .then((response) => { stateToken = response.match(/var stateToken = '(.*?)';/)[1].toString(); }); 
    }
    return stateToken;
  }

  _getFactorId(stateToken) {
    const url = 'https://gamestop.okta.com/api/v1/authn';
    const request = this._createRequest(url, 'POST');
    request.body = {
      stateToken
    };
    request.json = true;

    /*
      Factors
      token:software:totp = okta verify
      push = okta verify with push default
      token = MobilePass 
    */
    const validFactors = ["token:software:totp","token"]; 
    return requestAsync(request)
      .then((response) => {
        var factor;
        for (var i = 0; i < validFactors.length; i++){
          factor = response._embedded.factors.find(x => x.factorType === validFactors[i])
          if(factor)
            break;
        }
        if(!factor)
          throw new Error("Did not find valid factor");
        return factor.id;
      });
  }

  _performMFAVerification(factorId, mfa, stateToken) {
    const url = `https://gamestop.okta.com/api/v1/authn/factors/${factorId}/verify`;
    const request = this._createRequest(url, 'POST');
    request.body = {
      passCode: mfa,
      stateToken
    };
    request.json = true;

    return requestAsync(request)
      .then(response => response);
  }

  _getSAMLResponse(sessionToken, accountUrl) {
    const url = `https://gamestop.okta.com/login/sessionCookieRedirect?checkAccountSetupComplete=true&token=${sessionToken}&redirectUrl=${accountUrl}`;
    const request = this._createRequest(url, 'GET', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'application/x-www-form-urlencoded');
    request.headers['Upgrade-Insecure-Requests'] = 1;
    request.headers['internal-only'] = 1;
    request.headers.Referer = 'https://gamestop.okta.com/signin/verify/rsa/token';

    return requestAsync(request)
      .then((response) => {
        const samlResponse = response.match(/<input name="SAMLResponse" type="hidden" value="(.*?)"\/>/)[1];
        return samlResponse;
      });
  }

  _createRequest(url, requestMethod, contentType = null, accept = null) {
    const baseRequestObject = {
      method: requestMethod,
      followAllRedirects: true,
      headers: {
        'User-Agent': this._userAgent,
        Accept: (accept === null || accept === '') ? 'application/json' : 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Content-Type': (contentType === null || contentType === '') ? 'application/json' : 'application/x-www-form-urlencoded'
      },
      jar: this.jar,
      url
    };
    return baseRequestObject;
  }
}
module.exports = OktaService;
